const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Serve static files (front-end)
app.use(express.static('public'));

// Users array to store connected users (for simplicity)
let users = [];

io.on('connection', socket => {
    console.log('New user connected:', socket.id);

    // Add user to the users array
    users.push(socket.id);

    // Broadcast user joined event
    socket.broadcast.emit('userJoined', socket.id);

    // Handle signaling messages
    socket.on('offer', (offer, targetId) => {
        io.to(targetId).emit('offer', offer, socket.id);
    });

    socket.on('answer', (answer, targetId) => {
        io.to(targetId).emit('answer', answer);
    });

    socket.on('candidate', (candidate, targetId) => {
        io.to(targetId).emit('candidate', candidate);
    });

    // Handle skip event (disconnect user)
    socket.on('skip', () => {
        socket.emit('skip');
    });

    // Handle reporting
    socket.on('report', (reportedId) => {
        io.to(reportedId).emit('reported');
        console.log(`User ${reportedId} has been reported.`);
    });

    // Remove user on disconnect
    socket.on('disconnect', () => {
        users = users.filter(user => user !== socket.id);
        socket.broadcast.emit('userLeft', socket.id);
    });
});

server.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
